generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bus_brand {
  id_brand         Int               @id @default(autoincrement())
  brand_name       String @unique
  chairs_count     Int
  fuel_consumption Float
  fuel_type        String
  brand_cars       car[]
  reserve_drivers  reserver_driver[]
}

model car {
  id_car       Int       @id @default(autoincrement())
  fleet_number Int
  license_car  String    @unique
  
  brand_id     Int
  brand        bus_brand @relation(fields: [brand_id], references: [id_brand], onDelete: Cascade, onUpdate: Cascade)

  permanent_drivers permanent_driver[]

  car_customers customer[]
  car_requests  request[]
  car_road_maps road_map[]
}

model customer {
  id_customer       Int       @id @default(autoincrement())
  customer_id_number String @unique
  customer_name     String
  customer_surnames String
  customer_country  String
  customer_cars     car[]
  requests          request[]
}

model driver {
  id_driver    Int    @id() @default(autoincrement())
  driver_name  String
  address      String
  district     String
  phone_number String
  driver_dni   String @unique

}

model permanent_driver {
  id_driver Int @id

  id_car               Int
  permanent_driver_car car @relation(fields: [id_car], references: [id_car])
}

model reserver_driver {
  id_driver             Int       @id
  id_brand              Int
  reserver_driver_brand bus_brand @relation(fields: [id_brand], references: [id_brand], onDelete: Cascade, onUpdate: Cascade)
}

model request {
  id_request       Int      @id @default(autoincrement())
  id_customer      Int
  id_car           Int
  id_service       Int 
  request_service special_service @relation(fields: [id_service], references: [id_service], onDelete: Cascade, onUpdate: Cascade)
  request_car      car      @relation(fields: [id_car], references: [id_car], onDelete: Cascade, onUpdate: Cascade)
  
  request_customer customer @relation(fields: [id_customer], references: [id_customer], onDelete: Cascade, onUpdate: Cascade)

  

}

model road_map {
  id_road_map     Int      @id @default(autoincrement())
  road_map_number String   @unique
  id_car          Int
  traveled_km     Decimal
  date            DateTime
  road_map_car    car      @relation(fields: [id_car], references: [id_car], onDelete: Cascade, onUpdate: Cascade)
  road_map_service_performed service_performed []
}


model service {
  id_service      Int          @id @default(autoincrement())
  service_name    String @unique
  service_code    String
  planned_km      Decimal
  planned_fuel    Decimal
  

}

model planned_service {
  id_service       Int      @id
  pickup_location  String
  cust_req_number  Int
  pickup_time      DateTime
  id_tourist_group Int
  service_group tourist_group @relation(fields: [id_tourist_group], references: [id_tourist_group])
  planned_service_service_performed service_performed[]
}

model special_service {
  id_service      Int      @id
  start_date      DateTime
  ending_date     DateTime
  traveled_km     Decimal
  contract_number Int
  id_request Int
  service_request request []
}



model tourist_group {
  id_tourist_group Int    @id @default(autoincrement())
  group_number     Int @unique
  group_country    String
  passengers_count Int
  group_services planned_service []
  
  
}

model user {
  id_user   Int    @id @default(autoincrement())
  username String @unique
  password  String
  user_role   String
  
}

model service_performed{
  id_service_performed Int @id @default(autoincrement())
  id_service Int 
id_road_map Int 
  service_performed_road_map road_map @relation(fields: [id_road_map], references: [id_road_map], onDelete: Cascade, onUpdate: Cascade)
  service_performed_planned_service planned_service @relation(fields: [id_service], references: [id_service] ,onDelete: Cascade, onUpdate: Cascade )
}
